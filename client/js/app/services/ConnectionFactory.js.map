{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","closeConnection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","close","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,4B,GAAkB,I;;yCAETC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,uDAAkBD,WAAWiB,KAAX,CAAiBC,IAAjB,CAAsBlB,UAAtB,CAAlB;AACAA,+CAAWiB,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAId,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYY,OAAZ,GAAsB,aAAK;AACvBb,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAFD;AAGH,yBAvBM,CAAP;AAwBH;;;kDAEoBrB,U,EAAY;;AAE7BH,+BAAOyB,OAAP,CAAe,iBAAS;;AAEpB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC;AAChCG,+CAAe;AADiB,6BAApC;AAGH,yBAND;AAOH;;;sDAEwB;AACrB,4BAAG5B,UAAH,EAAe;AACXC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 8;\nconst dbName = \"aluraframe\";\n\nlet connection = null;\nlet closeConnection = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de connection factory');\n    }\n    \n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n\n                if(!connection) {\n                    connection = e.target.result;\n                    closeConnection = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    }\n                }\n                \n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n            connection.createObjectStore(store, {\n                autoIncrement: true\n            });\n        });\n    }\n\n    static closeConnection() {\n        if(connection) {\n            closeConnection();\n            connection = null;\n        }\n    }\n\n}\n"]}