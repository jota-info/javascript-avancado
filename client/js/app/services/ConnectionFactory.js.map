{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","closeConnection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","close","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAMA,oBAAqB,YAAW;;AAElC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,mBAAkB,IAAtB;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,+CAAkBD,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBjB,UAAtB,CAAlB;AACAA,uCAAWgB,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAId,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR;AACH,qBAXD;;AAaAM,gCAAYY,OAAZ,GAAsB,aAAK;AACvBb,+BAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,qBAFD;AAGH,iBAvBM,CAAP;AAwBH;AA/BL;AAAA;AAAA,0CAiCyBpB,UAjCzB,EAiCqC;;AAE7BH,uBAAOwB,OAAP,CAAe,iBAAS;;AAEpB,wBAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDxB,WAAWyB,iBAAX,CAA6BD,KAA7B;AACjDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC;AAChCG,uCAAe;AADiB,qBAApC;AAGH,iBAND;AAOH;AA1CL;AAAA;AAAA,8CA4C6B;AACrB,oBAAG3B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AAjDL;;AAAA;AAAA;AAoDH,CA7DyB,EAA1B","file":"ConnectionFactory.js","sourcesContent":["const ConnectionFactory = (function() {\n\n    const stores = ['negociacoes'];\n    const version = 8;\n    const dbName = \"aluraframe\";\n\n    let connection = null;\n    let closeConnection = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Não é possível criar instâncias de connection factory');\n        }\n        \n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection) {\n                        connection = e.target.result;\n                        closeConnection = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n                    \n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n\n            stores.forEach(store => {\n\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, {\n                    autoIncrement: true\n                });\n            });\n        }\n\n        static closeConnection() {\n            if(connection) {\n                closeConnection();\n                connection = null;\n            }\n        }\n\n    }\n})();"]}