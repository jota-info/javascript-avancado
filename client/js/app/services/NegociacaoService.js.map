{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","error","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","arrayAchatado","array","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.error(error);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.error(error);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n         return new Promise((resolve, reject) => {\n             this._http\n                 .get('negociacoes/retrasada')\n                 .then(negociacoes => {\n                     resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                 })\n                 .catch(error => {\n                     console.error(error);\n                     reject('Não foi possível obter as negociações da semana retrasada');\n                 })\n         });\n    }\n\n    obterNegociacoes() {\n        return new Promise((resolve, reject) => {\n           Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ])\n            .then(negociacoes => {\n                resolve(negociacoes\n                    .reduce((arrayAchatado, array) => arrayAchatado.concat(array), []));\n            })\n            .catch(error => {\n                reject(error);\n            });\n        });\n    }\n\n    cadastrar(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso!')\n            .catch(error => { throw new Error(error) });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(error => {\n                throw new Error('Não foi possível listar as negociações');\n            })\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso!')\n            .catch(error => {\n                throw new Error(error);\n            })\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        JSON.stringify(negociacaoExistente) === JSON.stringify(negociacao))\n                )\n            )\n            .catch(error => {\n                throw new Error('Não foi possível importar negociações');\n            })\n    }\n}"]}